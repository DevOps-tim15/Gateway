version: "3.8"
services:
  gateway:
    image: nginx:1.19.8-alpine
    ports:
      - 8080:8080
    networks:
      - servers
    depends_on:
      - auth-service
      - post-service
      - user-service
    volumes:
      - ./Gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Gateway/api_gateway.conf:/etc/nginx/api_gateway.conf  

  auth-service:
    build:
      context: ../Authentication
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appServerRuntime}
    image: kaca97/auth:${VERSION:-0.0.1}-${STAGE:-dev}
    container_name: auth
    restart: on-failure
    ports:
      - 8081:8080
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME:-sa}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-zgadija}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN:-database}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_AUTH:-userauth}
      KAFKA_DOMAIN: ${KAFKA_HOSTNAME}
      KAFKA_PORT: ${KAFKA_PORT}
    networks:
      - servers
    depends_on:
      - database
      - kafka-service

  user-service:
    build:
      context: ../User
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appServerRuntime}
    image: kaca97/user:${VERSION:-0.0.1}-${STAGE:-dev}
    container_name: user-service
    restart: on-failure
    ports:
      - 8082:8080
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME:-sa}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-zgadija}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN:-database}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_USER:-userservice}
      KAFKA_DOMAIN: ${KAFKA_HOSTNAME}
      KAFKA_PORT: ${KAFKA_PORT}
    networks:
      - servers
    depends_on:
      - database
      - kafka-service
  post-service:
    build:
      context: ../Post
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appServerRuntime}
    image: kaca97/post:${VERSION:-0.0.1}-${STAGE:-dev}
    container_name: post-service
    restart: on-failure
    ports:
      - 8083:8080
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME:-sa}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-zgadija}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN:-database}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA_POST:-postservice}
      KAFKA_DOMAIN: ${KAFKA_HOSTNAME}
      KAFKA_PORT: ${KAFKA_PORT}
    networks:
      - servers
    depends_on:
      - database
      - kafka-service
    
  database:
    image: mysql:${MYSQL_VERSION:-8.0.26}
    container_name: mysql
    restart: always
    networks:
      - servers
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_USER: ${MYSQL_USER:-sa}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-zgadija}
    volumes:
      - database-data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d

  frontend-service:
    build:
      context: ../Frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: on-failure
    networks:
      - servers
    ports:
      - 4200:4200

  zookeeper-service:
    image: zookeeper:latest
    container_name: zoo
    hostname: ${ZOOKEEPER_HOSTNAME}
    restart: always
    ports:
      - "${ZOOKEEPER_PORT}:2181"
      - "${ZOOKEEPER_PORT_ADMIN}:8080"
    networks:
      - servers
  
  kafka-service:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: ${KAFKA_HOSTNAME}
    ports:
      - "${KAFKA_PORT}:9092"
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "${ZOOKEEPER_HOSTNAME}:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka-service:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-kafka-service}:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
    depends_on:
      - zookeeper-service
    networks:
      - servers

volumes:
  database-data:
    name: nistagram-database

networks:
  servers:
    name: servers
    driver: bridge
